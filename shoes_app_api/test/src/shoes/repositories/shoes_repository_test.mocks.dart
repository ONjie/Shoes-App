// Mocks generated by Mockito 5.4.5 from annotations
// in shoes_api/test/src/shoes/repositories/shoes_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shoes_api/src/shoes/data_sources/remote_data/supabase_database.dart'
    as _i3;
import 'package:shoes_api/src/shoes/models/shoe.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeShoe_0 extends _i1.SmartFake implements _i2.Shoe {
  _FakeShoe_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SupabaseDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseDatabase extends _i1.Mock implements _i3.SupabaseDatabase {
  @override
  _i4.Future<List<_i2.Shoe>> fetchShoes() =>
      (super.noSuchMethod(
            Invocation.method(#fetchShoes, []),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchShoesSuggestions({required String? title}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchShoesSuggestions, [], {#title: title}),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<_i2.Shoe> fetchShoeById({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchShoeById, [], {#id: id}),
            returnValue: _i4.Future<_i2.Shoe>.value(
              _FakeShoe_0(
                this,
                Invocation.method(#fetchShoeById, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Shoe>.value(
              _FakeShoe_0(
                this,
                Invocation.method(#fetchShoeById, [], {#id: id}),
              ),
            ),
          )
          as _i4.Future<_i2.Shoe>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchShoesByBrand({required String? brand}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchShoesByBrand, [], {#brand: brand}),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchShoesByCategory({
    required String? category,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchShoesByCategory, [], {#category: category}),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchLatestShoes() =>
      (super.noSuchMethod(
            Invocation.method(#fetchLatestShoes, []),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchPopularShoes() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPopularShoes, []),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchOtherShoes() =>
      (super.noSuchMethod(
            Invocation.method(#fetchOtherShoes, []),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchLatestShoesByBrand({
    required String? brand,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchLatestShoesByBrand, [], {#brand: brand}),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchPopularShoesByBrand({
    required String? brand,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPopularShoesByBrand, [], {#brand: brand}),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);

  @override
  _i4.Future<List<_i2.Shoe>> fetchOtherShoesByBrand({required String? brand}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchOtherShoesByBrand, [], {#brand: brand}),
            returnValue: _i4.Future<List<_i2.Shoe>>.value(<_i2.Shoe>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.Shoe>>.value(
              <_i2.Shoe>[],
            ),
          )
          as _i4.Future<List<_i2.Shoe>>);
}
